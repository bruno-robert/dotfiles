# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south

# move window
ctrl + alt - h : yabai -m window --warp west
ctrl + alt - l : yabai -m window --warp east
ctrl + alt - k : yabai -m window --warp north
ctrl + alt - j : yabai -m window --warp south

# swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# fast focus desktop (handeled by Misson Control)
cmd + alt - x : yabai -m space --focus recent
# Ideally this should dynamically know on what screen each space is...
# cmd + alt - 1 : yabai -m space --focus 1
# cmd + alt - 2 : yabai -m space --focus 2
# cmd + alt - 3 : yabai -m space --focus 3
# cmd + alt - 4 : yabai -m space --focus 4
# cmd + alt - 5 : yabai -m space --focus 5
# cmd + alt - 6 : yabai -m space --focus 6
# cmd + alt - 7 : yabai -m space --focus 7
# cmd + alt - 8 : yabai -m space --focus 8

# send window to desktop
# The move + switch to desktop has the issue of moving all windows very rapidly unless you release the key combinations immediatly
# shift + alt - 1 : yabai -m window --space 1; osascript -e 'tell application "System Events" to key code 18 using option down'
# shift + alt - 2 : yabai -m window --space 2; osascript -e 'tell application "System Events" to key code 19 using option down' 
# shift + alt - 3 : yabai -m window --space 3; osascript -e 'tell application "System Events" to key code 20 using option down'
# shift + alt - 4 : yabai -m window --space 4; osascript -e 'tell application "System Events" to key code 21 using option down'
# shift + alt - 5 : yabai -m window --space 5; osascript -e 'tell application "System Events" to key code 23 using option down'
# shift + alt - 6 : yabai -m window --space 6; osascript -e 'tell application "System Events" to key code 22 using option down'
# shift + alt - 7 : yabai -m window --space 7; osascript -e 'tell application "System Events" to key code 26 using option down'
# shift + alt - 8 : yabai -m window --space 8; osascript -e 'tell application "System Events" to key code 28 using option down'
# shift + alt - 9 : yabai -m window --space 9; osascript -e 'tell application "System Events" to key code 25 using option down'

shift + alt - 1 : yabai -m window --space 1
shift + alt - 2 : yabai -m window --space 2
shift + alt - 3 : yabai -m window --space 3
shift + alt - 4 : yabai -m window --space 4
shift + ctrl - 1 : yabai -m window --space 5
shift + ctrl - 2 : yabai -m window --space 6
shift + ctrl - 3 : yabai -m window --space 7
shift + ctrl - 4 : yabai -m window --space 8
# shift + alt - 5 : yabai -m window --space 5
# shift + alt - 6 : yabai -m window --space 6
# shift + alt - 7 : yabai -m window --space 7
# shift + alt - 8 : yabai -m window --space 8
# shift + alt - 9 : yabai -m window --space 9

# focus monitor
alt - i  : yabai -m display --focus prev
alt - o  : yabai -m display --focus next

# send window to monitor and follow focus
shift + alt - i  : yabai -m window --display prev; yabai -m display --focus 1
shift + alt - o  : yabai -m window --display next; yabai -m display --focus 2

# resize mode
:: resize @ : chunkc border::color 0xccbc0d; chunkc border::width 1
alt - r ; resize
# increase window width
resize < f : yabai -m window --resize right:+20:0; yabai -m window --resize left:-20:0
resize < l : yabai -m window --resize right:+20:0; yabai -m window --resize left:-20:0
# decrease window width
resize < a : yabai -m window --resize right:-20:0; yabai -m window --resize left:+20:0
resize < h : yabai -m window --resize right:-20:0; yabai -m window --resize left:+20:0
# increase window height
resize < d : yabai -m window --resize top:0:-20; yabai -m window --resize bottom:0:+20
resize < k : yabai -m window --resize top:0:-20; yabai -m window --resize bottom:0:+20
# decrease window height
resize < s : yabai -m window --resize top:0:+20; yabai -m window --resize bottom:0:-20
resize < j : yabai -m window --resize top:0:+20; yabai -m window --resize bottom:0:-20
resize < escape ; default

# toggle window split type
alt - w : yabai -m window --toggle split

# balance size of windows
shift + alt - b : yabai -m space --balance

# mirror tree y-axis
alt - y : yabai -m space --mirror y-axis

# mirror tree x-axis
alt - x : yabai -m space --mirror x-axis

# rotate tree
ctrl + alt - u : yabai -m space --rotate 90
ctrl + alt - p : yabai -m space --rotate 270

# change layout of desktop
ctrl + alt - a : yabai -m space --layout bsp
ctrl + alt - d : yabai -m space --layout float

# toggle window fullscreen zoom
alt - space : yabai -m window --toggle zoom-fullscreen

# App shortcuts
alt - return : osascript /Users/bruno/Scripts/open-iterm.scpt

# window size control without without mode
# increase window width
# alt - f : yabai -m window --resize right:+20:0; yabai -m window --resize left:-20:0
# decrease window width
# alt - a : yabai -m window --resize right:-20:0; yabai -m window --resize left:+20:0
# increase window height
# alt - d : yabai -m window --resize top:0:-20; yabai -m window --resize bottom:0:+20
# decrease window height
# alt - s : yabai -m window --resize top:0:+20; yabai -m window --resize bottom:0:-20

# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20


# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #


